Module Bookstore
{
    Entity Employee
    {
        ShortString UserName;
    }

    Entity Book
    {
        MonitoredRecord;
        ShortString Code { AutoCode; }
        ShortString Title { Required; }
        ShortString ShortTitle;
        Integer NumberOfPages { MinValue 1; MaxValue 1000; }
        Reference Author Bookstore.Person;
        Reference Debtor Bookstore.Person;

        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';

        ComposableFilterBy LongBooks2 '(query, repository, parameter) =>
        {
            return query.Where(item => item.NumberOfPages >= 500);
        }';

       ComposableFilterBy LongBooks3 '(query, repository, parameter) =>
        {
            var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
            return filtered;
        }';

        FilterBy ComplexSearch '(repository, parameter) =>
        {
            var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                query = query.Where(item => item.Extension_ForeignBook.ID != null);
            Book[] books = query.ToSimple().ToArray();

            if (parameter.MaskTitles == true)
                foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                    book.Title = book.Title.First() + "***" + book.Title.Last();

            return books;
        }';

        Reference AssignedTo Bookstore.Employee; // Only the assigned person should be allowed to edit the book data.

        RowPermissions
        {
            AllowRead EveryoneCanRead 'context =>
            {
                return book => book.AssignedTo.ID != null;
            }';

            // Better:
            AllowRead EveryoneCanRead2 'context =>
            {
                return book => true;
            }';

            // Shorter:
            AllowRead EveryoneCanRead3 'context => book => true';

            //====================

            Allow OwnerCanWrite 'context =>
            {
                Guid employeeId = context.Repository
                    .Bookstore.Employee.Query()
                    .Where(e => e.UserName == context.UserInfo.UserName)
                    .Select( e => e.ID)
                    .SingleOrDefault();
                return book => book.AssignedTo.ID == employeeId;
            }';

            // Better:
            AllowWrite OwnerCanWrite2 'context =>
            {
                return book => book.AssignedTo.UserName == context.UserInfo.UserName;
            }';
        }

        Logging;
   }

   Parameter LongBooks2
    {
    }

    Parameter LongBooks3
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
    }

    Parameter ComplexSearch
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }

    Entity Person
    {
        ShortString Name;
        ShortString E_mail { RegExMatch "[\w-\.]+@([\w-]+\.)+[\w-]{2,4}" "Email not in good format."; }
    }

    Entity Comment
    {
        Reference Book { Detail; }
        LongString Text { DenyUserEdit; } 
        DateTime Created { CreationTime; }

        RowPermissions
        {
            AllowRead EveryoneCanRead 'context =>
            {
                return comment => comment.Book.AssignedTo.ID != null;
            }';

            Allow OwnerCanWrite 'context =>
            {
                Guid employeeId = context.Repository
                    .Bookstore.Employee.Query()
                    .Where(e => e.UserName == context.UserInfo.UserName)
                    .Select(e => e.ID)
                    .SingleOrDefault();

                return comment => comment.Book.AssignedTo.ID == employeeId;
            }';

            // Better:
            InheritFrom Bookstore.Comment.Book;
        }
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo; // A simple validation.
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;
    }

    Entity Topic
    {
        ShortString Name { Unique; Required; }
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Browse BookGrid Bookstore.Book
    {
        Take Code;
        Take Title;
        Take 'Author.Name';
        // NumberOfTopics -- Ask Bojan about this ???
    }

    SqlQueryable BookInfo
        "SELECT b.ID,
                NumberOfComments = COUNT(c.ID)
         FROM
         Bookstore.Book b
         LEFT JOIN Bookstore.Comment c ON c.BookID = b.ID
         GROUP BY
         b.ID"
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
    }

    Action InsertManyBooks
    '(parameter, repository, userInfo) =>
    {
        for (int i = 0; i < parameter.NumberOfBooks; i++)
        {
            string newTitle = parameter.TitlePrefix + " - " + (i + 1);
            var newBook = new Bookstore.Book { Code = "+++", Title = newTitle };
            repository.Bookstore.Book.Insert(newBook);
        }
    }'
    {
        Integer NumberOfBooks;
        ShortString TitlePrefix;
    }
}